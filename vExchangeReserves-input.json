{"language":"Solidity","sources":{"/C/virtuswap/v1-core/contracts/interfaces/IvFlashSwapCallback.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\ninterface IvFlashSwapCallback {\r\n    function vFlashSwapCallback(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 requiredBackAmount,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/interfaces/IvPair.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\nimport \"../types.sol\";\r\n\r\ninterface IvPair {\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n\r\n    event Swap(\r\n        address indexed sender,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOut,\r\n        address indexed to\r\n    );\r\n\r\n    event SwapReserve(\r\n        address indexed sender,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOut,\r\n        address ikPool,\r\n        address indexed to\r\n    );\r\n\r\n    event AllowListChanged(address[] tokens);\r\n\r\n    event Sync(uint256 balance0, uint256 balance1);\r\n\r\n    event FactoryChanged(address newFactory);\r\n\r\n    event FeeChanged(uint24 fee, uint24 vFee);\r\n\r\n    event ReserveThresholdChanged(uint256 newThreshold);\r\n\r\n    event AllowListCountChanged(uint24 _maxAllowListCount);\r\n\r\n    function fee() external view returns (uint24);\r\n\r\n    function vFee() external view returns (uint24);\r\n\r\n    function setFee(uint24 _fee, uint24 _vFee) external;\r\n\r\n    function swapNative(\r\n        uint256 amountOut,\r\n        address tokenOut,\r\n        address to,\r\n        bytes calldata data\r\n    ) external returns (uint256 _amountIn);\r\n\r\n    function swapReserveToNative(\r\n        uint256 amountOut,\r\n        address ikPair,\r\n        address to,\r\n        bytes calldata data\r\n    ) external returns (uint256 _amountIn);\r\n\r\n    function swapNativeToReserve(\r\n        uint256 amountOut,\r\n        address ikPair,\r\n        address to,\r\n        bytes calldata data\r\n    ) external returns (uint256 _amountIn);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function setAllowList(address[] memory _allowList) external;\r\n\r\n    function setMaxAllowListCount(uint24 _maxAllowListCount) external;\r\n\r\n    function calculateReserveRatio() external view returns (uint256 rRatio);\r\n\r\n    function setMaxReserveThreshold(uint256 threshold) external;\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function pairBalance0() external view returns (uint256);\r\n\r\n    function pairBalance1() external view returns (uint256);\r\n\r\n    function maxAllowListCount() external view returns (uint24);\r\n\r\n    function getBalances() external view returns (uint256, uint256);\r\n\r\n    function getLastBalances()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _lastBalance0,\r\n            uint256 _lastBalance1,\r\n            uint256 _blockNumber\r\n        );\r\n\r\n    function getTokens() external view returns (address, address);\r\n\r\n    function reservesBaseValue(address reserveAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function reserves(address reserveAddress) external view returns (uint256);\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/types.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\nstruct VirtualPoolModel {\r\n    uint24 fee;\r\n    address token0;\r\n    address token1;\r\n    uint256 balance0;\r\n    uint256 balance1;\r\n    address commonToken;\r\n}\r\n\r\nstruct VirtualPoolTokens {\r\n    address jk0;\r\n    address jk1;\r\n    address ik0;\r\n    address ik1;\r\n}\r\n\r\nstruct ExchangeReserveCallbackParams {\r\n    address jkPair1;\r\n    address jkPair2;\r\n    address ikPair2;\r\n}\r\n\r\nstruct SwapCallbackData {\r\n    address caller;\r\n    uint256 tokenInMax;\r\n    uint ETHValue;\r\n    address jkPool;\r\n}\r\n\r\nstruct PoolCreationDefaults {\r\n    address factory;\r\n    address token0;\r\n    address token1;\r\n    uint24 fee;\r\n    uint24 vFee;\r\n    uint24 maxAllowListCount;\r\n    uint256 maxReserveRatio;\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/vExchangeReserves.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.2;\r\n\r\nimport \"./types.sol\";\r\nimport \"./interfaces/IvPair.sol\";\r\nimport \"./interfaces/IvFlashSwapCallback.sol\";\r\n\r\ncontract vExchangeReserves is IvFlashSwapCallback {\r\n    address immutable factory;\r\n\r\n    constructor(address _factory) {\r\n        factory = _factory;\r\n    }\r\n\r\n    function vFlashSwapCallback(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 requiredBackAmount,\r\n        bytes calldata data\r\n    ) external override {\r\n        ExchangeReserveCallbackParams memory decodedData = abi.decode(\r\n            data,\r\n            (ExchangeReserveCallbackParams)\r\n        );\r\n\r\n        IvPair(decodedData.jkPair2).swapNativeToReserve(\r\n            requiredBackAmount,\r\n            decodedData.ikPair2,\r\n            decodedData.jkPair1,\r\n            new bytes(0)\r\n        );\r\n    }\r\n\r\n    function exchange(\r\n        address jkPair1,\r\n        address ikPair1,\r\n        address jkPair2,\r\n        uint256 flashAmountOut,\r\n        bytes calldata swapCallbackData\r\n    ) external {\r\n        IvPair(jkPair1).swapNativeToReserve(\r\n            flashAmountOut,\r\n            ikPair1,\r\n            jkPair2,\r\n            swapCallbackData\r\n        );\r\n    }\r\n}\r\n"}},"settings":{"remappings":[],"optimizer":{"enabled":true,"runs":800},"evmVersion":"istanbul"}}