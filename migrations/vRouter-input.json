{"language":"Solidity","sources":{"/C/virtuswap/v1-core/contracts/base/multicall.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\npragma abicoder v2;\r\n\r\nimport \"../interfaces/IMulticall.sol\";\r\n\r\n/// @title Multicall\r\n/// @notice Enables calling multiple methods in a single call to the contract\r\nabstract contract Multicall is IMulticall {\r\n    /// @inheritdoc IMulticall\r\n    function multicall(bytes[] calldata data, bool fPartial)\r\n        external\r\n        payable\r\n        override\r\n        returns (bytes[] memory results)\r\n    {\r\n        results = new bytes[](data.length);\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(\r\n                data[i]\r\n            );\r\n\r\n            if (!success && !fPartial) {\r\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\r\n                if (result.length < 68) revert();\r\n                assembly {\r\n                    result := add(result, 0x04)\r\n                }\r\n                revert(abi.decode(result, (string)));\r\n            }\r\n\r\n            results[i] = result;\r\n        }\r\n    }\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/interfaces/IMulticall.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\npragma abicoder v2;\r\n\r\n/// @title Multicall interface\r\n/// @notice Enables calling multiple methods in a single call to the contract\r\ninterface IMulticall {\r\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\r\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\r\n    /// @param data The encoded function data for each of the calls to make to this contract\r\n    /// @return results The results from each of the calls passed in via data\r\n    function multicall(bytes[] calldata data, bool ffPartial)\r\n        external\r\n        payable\r\n        returns (bytes[] memory results);\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/interfaces/IvFlashSwapCallback.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\ninterface IvFlashSwapCallback {\r\n    function vFlashSwapCallback(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 requiredBackAmount,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/interfaces/IvPair.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\nimport \"../types.sol\";\r\n\r\ninterface IvPair {\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n\r\n    event Swap(\r\n        address indexed sender,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOut,\r\n        address indexed to\r\n    );\r\n\r\n    event SwapReserve(\r\n        address indexed sender,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOut,\r\n        address ikPool,\r\n        address indexed to\r\n    );\r\n\r\n    event AllowListChanged(address[] tokens);\r\n\r\n    event Sync(uint256 balance0, uint256 balance1);\r\n\r\n    event FactoryChanged(address newFactory);\r\n\r\n    event FeeChanged(uint24 fee, uint24 vFee);\r\n\r\n    event ReserveThresholdChanged(uint256 newThreshold);\r\n\r\n    event AllowListCountChanged(uint24 _maxAllowListCount);\r\n\r\n    function fee() external view returns (uint24);\r\n\r\n    function vFee() external view returns (uint24);\r\n\r\n    function setFee(uint24 _fee, uint24 _vFee) external;\r\n\r\n    function swapNative(\r\n        uint256 amountOut,\r\n        address tokenOut,\r\n        address to,\r\n        bytes calldata data\r\n    ) external returns (uint256 _amountIn);\r\n\r\n    function swapReserveToNative(\r\n        uint256 amountOut,\r\n        address ikPair,\r\n        address to,\r\n        bytes calldata data\r\n    ) external returns (uint256 _amountIn);\r\n\r\n    function swapNativeToReserve(\r\n        uint256 amountOut,\r\n        address ikPair,\r\n        address to,\r\n        bytes calldata data\r\n    ) external returns (uint256 _amountIn);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function setAllowList(address[] memory _allowList) external;\r\n\r\n    function setMaxAllowListCount(uint24 _maxAllowListCount) external;\r\n\r\n    function calculateReserveRatio() external view returns (uint256 rRatio);\r\n\r\n    function setMaxReserveThreshold(uint256 threshold) external;\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function pairBalance0() external view returns (uint256);\r\n\r\n    function pairBalance1() external view returns (uint256);\r\n\r\n    function maxAllowListCount() external view returns (uint24);\r\n\r\n    function getBalances() external view returns (uint256, uint256);\r\n\r\n    function getLastBalances()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _lastBalance0,\r\n            uint256 _lastBalance1,\r\n            uint256 _blockNumber\r\n        );\r\n\r\n    function getTokens() external view returns (address, address);\r\n\r\n    function reservesBaseValue(address reserveAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function reserves(address reserveAddress) external view returns (uint256);\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/interfaces/IvPairFactory.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\ninterface IvPairFactory {\r\n    event PairCreated(\r\n        address poolAddress,\r\n        address factory,\r\n        address token0,\r\n        address token1\r\n    );\r\n\r\n    event FactoryAdminChanged(address newAdmin);\r\n\r\n    event ExchangeReserveAddressChanged(address newExchangeReserve);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function changeAdmin(address newAdmin) external;\r\n\r\n    function exchangeReserves() external view returns (address);\r\n\r\n    function setExchangeReservesAddress(address _exchangeReserves) external;\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/interfaces/IvRouter.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\nimport \"../types.sol\";\r\nimport \"./IvFlashSwapCallback.sol\";\r\n\r\ninterface IvRouter is IvFlashSwapCallback {\r\n    event RouterFactoryChanged(address newFactoryAddress);\r\n\r\n    function changeFactory(address _factory) external;\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function WETH9() external view returns (address);\r\n\r\n    function swapExactOutput(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        uint256 maxAmountIn,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactInput(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 minAmountOut,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapReserveExactOutput(\r\n        address tokenOut,\r\n        address commonToken,\r\n        address ikPair,\r\n        uint256 amountOut,\r\n        uint256 maxAmountIn,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapReserveExactInput(\r\n        address tokenOut,\r\n        address commonToken,\r\n        address ikPair,\r\n        uint256 amountIn,\r\n        uint256 minAmountOut,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            address pairAddress,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountIn\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountOut\r\n    ) external view returns (uint256 amountIn);\r\n\r\n    function quote(\r\n        address inputToken,\r\n        address outputToken,\r\n        uint256 amountIn\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function getVirtualAmountIn(\r\n        address jkPair,\r\n        address ikPair,\r\n        uint256 amountOut\r\n    ) external view returns (uint256 amountIn);\r\n\r\n    function getVirtualAmountOut(\r\n        address jkPair,\r\n        address ikPair,\r\n        uint256 amountIn\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function getVirtualPool(address jkPair, address ikPair)\r\n        external\r\n        view\r\n        returns (VirtualPoolModel memory vPool);\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/interfaces/IvSwapPoolDeployer.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\n\r\n/// @title An interface for a contract that is capable of deploying Uniswap V3 Pools\r\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\r\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\r\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\r\ninterface IvSwapPoolDeployer {\r\n    /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\r\n    /// @dev Called by the pool constructor to fetch the parameters of the pool\r\n    /// Returns factory The factory address\r\n    /// Returns token0 The first token of the pool by address sort order\r\n    /// Returns token1 The second token of the pool by address sort order\r\n    /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// Returns tickSpacing The minimum number of ticks between initialized ticks\r\n    function poolCreationDefaults()\r\n        external\r\n        view\r\n        returns (\r\n            address factory,\r\n            address token0,\r\n            address token1,\r\n            uint24 fee,\r\n            uint24 vFee,\r\n            uint24 maxAllowListCount,\r\n            uint256 maxReserveRatio\r\n        );\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/interfaces/external/IWETH9.sol":{"content":"pragma solidity 0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/// @title Interface for WETH9\r\ninterface IWETH9 is IERC20 {\r\n    /// @notice Deposit ether to get wrapped ether\r\n    function deposit() external payable;\r\n\r\n    /// @notice Withdraw wrapped ether to get ether\r\n    function withdraw(uint256) external;\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/libraries/PoolAddress.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\n/// @title Provides functions for deriving a pool address from the factory and token\r\nlibrary PoolAddress {\r\n    bytes32 internal constant POOL_INIT_CODE_HASH =\r\n        0x3c7a207bf7845bc784110ca7a1aa30a4063eebe74cf9582d9d7c05ec02dae608;\r\n\r\n    function orderAddresses(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address token0, address token1)\r\n    {\r\n        return (tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA));\r\n    }\r\n\r\n    function getSalt(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (bytes32 salt)\r\n    {\r\n        (address token0, address token1) = orderAddresses(tokenA, tokenB);\r\n        salt = keccak256(abi.encode(token0, token1));\r\n    }\r\n\r\n    function computeAddress(\r\n        address factory,\r\n        address token0,\r\n        address token1\r\n    ) internal pure returns (address pool) {\r\n        bytes32 _salt = getSalt(token0, token1);\r\n\r\n        pool = address(\r\n            uint160(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            bytes1(0xff),\r\n                            factory,\r\n                            _salt,\r\n                            POOL_INIT_CODE_HASH\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/libraries/vSwapLibrary.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport \"../types.sol\";\r\nimport \"../interfaces/IvPair.sol\";\r\n\r\nlibrary vSwapLibrary {\r\n    uint24 internal constant PRICE_FEE_FACTOR = 10**3;\r\n\r\n    //find common token and assign to ikToken1 and jkToken1\r\n    function findCommonToken(\r\n        address ikToken0,\r\n        address ikToken1,\r\n        address jkToken0,\r\n        address jkToken1\r\n    ) internal pure returns (VirtualPoolTokens memory vPoolTokens) {\r\n        (\r\n            vPoolTokens.ik0,\r\n            vPoolTokens.ik1,\r\n            vPoolTokens.jk0,\r\n            vPoolTokens.jk1\r\n        ) = (ikToken0 == jkToken0)\r\n            ? (ikToken1, ikToken0, jkToken1, jkToken0)\r\n            : (ikToken0 == jkToken1)\r\n            ? (ikToken1, ikToken0, jkToken0, jkToken1)\r\n            : (ikToken1 == jkToken0)\r\n            ? (ikToken0, ikToken1, jkToken1, jkToken0)\r\n            : (ikToken0, ikToken1, jkToken0, jkToken1); //default\r\n    }\r\n\r\n    function percent(uint256 numerator, uint256 denominator)\r\n        internal\r\n        pure\r\n        returns (uint256 quotient)\r\n    {\r\n        // caution, check safe-to-multiply here\r\n        uint256 _numerator = numerator * 10**(18 + 1);\r\n        // with rounding of last digit\r\n        uint256 _quotient = ((_numerator / denominator) + 5) / 10;\r\n        return (_quotient);\r\n    }\r\n\r\n    function calculateVPool(\r\n        uint256 ikTokenABalance,\r\n        uint256 ikTokenBBalance,\r\n        uint256 jkTokenABalance,\r\n        uint256 jkTokenBBalance\r\n    ) internal pure returns (VirtualPoolModel memory vPool) {\r\n        vPool.balance0 =\r\n            (ikTokenABalance * Math.min(ikTokenBBalance, jkTokenBBalance)) /\r\n            Math.max(ikTokenBBalance, 1);\r\n\r\n        vPool.balance1 =\r\n            (jkTokenABalance * Math.min(ikTokenBBalance, jkTokenBBalance)) /\r\n            Math.max(jkTokenBBalance, 1);\r\n    }\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 pairBalanceIn,\r\n        uint256 pairBalanceOut,\r\n        uint256 fee\r\n    ) internal pure returns (uint256 amountIn) {\r\n        uint256 numerator = (pairBalanceIn * amountOut) * PRICE_FEE_FACTOR;\r\n        uint256 denominator = (pairBalanceOut - amountOut) * fee;\r\n        amountIn = (numerator / denominator) + 1;\r\n    }\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 pairBalanceIn,\r\n        uint256 pairBalanceOut,\r\n        uint256 fee\r\n    ) internal pure returns (uint256 amountOut) {\r\n        uint256 amountInWithFee = amountIn * fee;\r\n        uint256 numerator = amountInWithFee * pairBalanceOut;\r\n        uint256 denominator = (pairBalanceIn * PRICE_FEE_FACTOR) +\r\n            amountInWithFee;\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 balanceA,\r\n        uint256 balanceB\r\n    ) internal pure returns (uint256 amountB) {\r\n        require(amountA > 0, \"VSWAP: INSUFFICIENT_AMOUNT\");\r\n        require(balanceA > 0 && balanceB > 0, \"VSWAP: INSUFFICIENT_LIQUIDITY\");\r\n        amountB = (amountA * balanceB) / balanceA;\r\n    }\r\n\r\n    function sortBalances(\r\n        address tokenIn,\r\n        address baseToken,\r\n        uint256 pairBalance0,\r\n        uint256 pairBalance1\r\n    ) internal pure returns (uint256 _balance0, uint256 _balance1) {\r\n        (_balance0, _balance1) = baseToken == tokenIn\r\n            ? (pairBalance0, pairBalance1)\r\n            : (pairBalance1, pairBalance0);\r\n    }\r\n\r\n    function getVirtualPoolBase(\r\n        address jkToken0,\r\n        address jkToken1,\r\n        uint256 jkBalance0,\r\n        uint256 jkBalance1,\r\n        uint24 jkvFee,\r\n        address ikPair\r\n    ) internal view returns (VirtualPoolModel memory vPool) {\r\n        (address ik0, address ik1) = IvPair(ikPair).getTokens();\r\n        (address jk0, address jk1) = (jkToken0, jkToken1); //gas saving\r\n\r\n        VirtualPoolTokens memory vPoolTokens = findCommonToken(\r\n            ik0,\r\n            ik1,\r\n            jk0,\r\n            jk1\r\n        );\r\n\r\n        require(vPoolTokens.ik1 == vPoolTokens.jk1, \"IOP\");\r\n\r\n        (uint256 ikBalance0, uint256 ikBalance1, ) = IvPair(ikPair)\r\n            .getLastBalances();\r\n\r\n        (uint256 _jkBalance0, uint256 _jkBalance1) = (jkBalance0, jkBalance1); //gas saving\r\n\r\n        vPool = calculateVPool(\r\n            vPoolTokens.ik0 == ik0 ? ikBalance0 : ikBalance1,\r\n            vPoolTokens.ik0 == ik0 ? ikBalance1 : ikBalance0,\r\n            vPoolTokens.jk0 == jk0 ? _jkBalance0 : _jkBalance1,\r\n            vPoolTokens.jk0 == jk0 ? _jkBalance1 : _jkBalance0\r\n        );\r\n\r\n        vPool.token0 = vPoolTokens.ik0;\r\n        vPool.token1 = vPoolTokens.jk0;\r\n        vPool.commonToken = vPoolTokens.ik1;\r\n\r\n        vPool.fee = jkvFee;\r\n    }\r\n\r\n    function getVirtualPool(address jkPair, address ikPair)\r\n        internal\r\n        view\r\n        returns (VirtualPoolModel memory vPool)\r\n    {\r\n        (address jk0, address jk1) = IvPair(jkPair).getTokens();\r\n        (uint256 _balance0, uint256 _balance1, ) = IvPair(jkPair)\r\n            .getLastBalances();\r\n        uint24 vFee = IvPair(jkPair).vFee();\r\n\r\n        vPool = getVirtualPoolBase(\r\n            jk0,\r\n            jk1,\r\n            _balance0,\r\n            _balance1,\r\n            vFee,\r\n            ikPair\r\n        );\r\n    }\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/types.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\nstruct VirtualPoolModel {\r\n    uint24 fee;\r\n    address token0;\r\n    address token1;\r\n    uint256 balance0;\r\n    uint256 balance1;\r\n    address commonToken;\r\n}\r\n\r\nstruct VirtualPoolTokens {\r\n    address jk0;\r\n    address jk1;\r\n    address ik0;\r\n    address ik1;\r\n}\r\n\r\nstruct ExchangeReserveCallbackParams {\r\n    address jkPair1;\r\n    address jkPair2;\r\n    address ikPair2;\r\n}\r\n\r\nstruct SwapCallbackData {\r\n    address caller;\r\n    uint256 tokenInMax;\r\n    uint ETHValue;\r\n    address jkPool;\r\n}\r\n\r\nstruct PoolCreationDefaults {\r\n    address factory;\r\n    address token0;\r\n    address token1;\r\n    uint24 fee;\r\n    uint24 vFee;\r\n    uint24 maxAllowListCount;\r\n    uint256 maxReserveRatio;\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/vPair.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol\";\r\n\r\nimport \"./interfaces/IvPair.sol\";\r\nimport \"./interfaces/IvSwapPoolDeployer.sol\";\r\nimport \"./interfaces/IvPairFactory.sol\";\r\nimport \"./interfaces/IvFlashSwapCallback.sol\";\r\nimport \"./libraries/vSwapLibrary.sol\";\r\nimport \"./vSwapERC20.sol\";\r\n\r\ncontract vPair is IvPair, vSwapERC20 {\r\n    uint24 internal constant BASE_FACTOR = 1000;\r\n    uint24 internal constant MINIMUM_LIQUIDITY = BASE_FACTOR;\r\n    uint24 internal constant RESERVE_RATIO_FACTOR = BASE_FACTOR;\r\n    uint256 internal constant RESERVE_RATIO_WHOLE = (10**3) * 100 * 1e18;\r\n\r\n    address public factory;\r\n\r\n    address public immutable override token0;\r\n    address public immutable override token1;\r\n\r\n    uint24 public override fee;\r\n    uint24 public override vFee;\r\n\r\n    uint256 public override pairBalance0;\r\n    uint256 public override pairBalance1;\r\n\r\n    uint256 private _lastBlockUpdated;\r\n    uint256 private _lastPairBalance0;\r\n    uint256 private _lastPairBalance1;\r\n\r\n    uint256 public maxReserveRatio;\r\n\r\n    address[] public allowList;\r\n    mapping(address => bool) public allowListMap;\r\n    uint24 public override maxAllowListCount;\r\n\r\n    mapping(address => uint256) public override reservesBaseValue;\r\n    mapping(address => uint256) public override reserves;\r\n\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, \"L\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function _onlyFactoryAdmin() internal view {\r\n        require(msg.sender == IvPairFactory(factory).admin(), \"OA\");\r\n    }\r\n\r\n    modifier onlyFactoryAdmin() {\r\n        _onlyFactoryAdmin();\r\n        _;\r\n    }\r\n\r\n    modifier onlyForExchangeReserves() {\r\n        require(msg.sender == IvPairFactory(factory).exchangeReserves(), \"OER\");\r\n        _;\r\n    }\r\n\r\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\r\n    function fetchBalance(address token) internal view returns (uint256) {\r\n        (bool success, bytes memory data) = token.staticcall(\r\n            abi.encodeWithSelector(\r\n                IERC20Minimal.balanceOf.selector,\r\n                address(this)\r\n            )\r\n        );\r\n        require(success && data.length >= 32);\r\n        return abi.decode(data, (uint256));\r\n    }\r\n\r\n    constructor() {\r\n        (\r\n            factory,\r\n            token0,\r\n            token1,\r\n            fee,\r\n            vFee,\r\n            maxAllowListCount,\r\n            maxReserveRatio\r\n        ) = IvSwapPoolDeployer(msg.sender).poolCreationDefaults();\r\n    }\r\n\r\n    function _update(uint256 balance0, uint256 balance1) internal {\r\n        if (block.number > _lastBlockUpdated) {\r\n            (_lastPairBalance0, _lastPairBalance1) = (balance0, balance1);\r\n            _lastBlockUpdated = block.number;\r\n        }\r\n\r\n        (pairBalance0, pairBalance1) = (balance0, balance1);\r\n\r\n        emit Sync(balance0, balance1);\r\n    }\r\n\r\n    function getLastBalances()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256 _lastBalance0,\r\n            uint256 _lastBalance1,\r\n            uint256 _blockNumber\r\n        )\r\n    {\r\n        return (_lastPairBalance0, _lastPairBalance1, _lastBlockUpdated);\r\n    }\r\n\r\n    function getBalances()\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 _balance0, uint256 _balance1)\r\n    {\r\n        return (pairBalance0, pairBalance1);\r\n    }\r\n\r\n    function getTokens()\r\n        external\r\n        view\r\n        override\r\n        returns (address _token0, address _token1)\r\n    {\r\n        return (token0, token1);\r\n    }\r\n\r\n    function swapNative(\r\n        uint256 amountOut,\r\n        address tokenOut,\r\n        address to,\r\n        bytes calldata data\r\n    ) external override lock returns (uint256 _amountIn) {\r\n        require(to > address(0) && to != token0 && to != token1, \"IT\");\r\n        require(tokenOut == token0 || tokenOut == token1, \"NNT\");\r\n        require(amountOut > 0, \"IAO\");\r\n\r\n        SafeERC20.safeTransfer(IERC20(tokenOut), to, amountOut);\r\n\r\n        address _tokenIn = tokenOut == token0 ? token1 : token0;\r\n\r\n        (uint256 _balanceIn, uint256 _balanceOut) = vSwapLibrary.sortBalances(\r\n            _tokenIn,\r\n            token0,\r\n            pairBalance0,\r\n            pairBalance1\r\n        );\r\n\r\n        require(amountOut <= _balanceOut, \"AOE\");\r\n\r\n        uint256 requiredAmountIn = vSwapLibrary.getAmountIn(\r\n            amountOut,\r\n            _balanceIn,\r\n            _balanceOut,\r\n            fee\r\n        );\r\n\r\n        if (data.length > 0) {\r\n            IvFlashSwapCallback(msg.sender).vFlashSwapCallback(\r\n                _tokenIn,\r\n                tokenOut,\r\n                requiredAmountIn,\r\n                data\r\n            );\r\n        }\r\n\r\n        _amountIn = fetchBalance(_tokenIn) - _balanceIn;\r\n\r\n        require(_amountIn > 0 && _amountIn >= requiredAmountIn, \"IIA\");\r\n\r\n        {\r\n            //avoid stack too deep\r\n            bool _isTokenIn0 = _tokenIn == token0;\r\n\r\n            _update(\r\n                _isTokenIn0 ? _balanceIn + _amountIn : _balanceOut - amountOut,\r\n                _isTokenIn0 ? _balanceOut - amountOut : _balanceIn + _amountIn\r\n            );\r\n        }\r\n\r\n        emit Swap(\r\n            msg.sender,\r\n            _tokenIn,\r\n            tokenOut,\r\n            requiredAmountIn,\r\n            amountOut,\r\n            to\r\n        );\r\n    }\r\n\r\n    function swapNativeToReserve(\r\n        uint256 amountOut,\r\n        address ikPair,\r\n        address to,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        override\r\n        onlyForExchangeReserves\r\n        lock\r\n        returns (uint256 _amountIn)\r\n    {\r\n        require(amountOut > 0, \"IAO\");\r\n        require(to > address(0) && to != token0 && to != token1, \"IT\");\r\n\r\n        VirtualPoolModel memory vPool = vSwapLibrary.getVirtualPool(\r\n            ikPair,\r\n            address(this)\r\n        );\r\n\r\n        // validate ikPair with factory\r\n        require(\r\n            IvPairFactory(factory).getPair(vPool.token1, vPool.commonToken) ==\r\n                ikPair,\r\n            \"IIKP\"\r\n        );\r\n\r\n        require(amountOut <= vPool.balance1, \"AOE\");\r\n        require(allowListMap[vPool.token1], \"TNW\");\r\n        require(vPool.token0 == token0 || vPool.token0 == token1, \"NNT\");\r\n\r\n        SafeERC20.safeTransfer(IERC20(vPool.token1), to, amountOut);\r\n        uint256 requiredAmountIn = 0;\r\n\r\n        requiredAmountIn = vSwapLibrary.quote(\r\n            amountOut,\r\n            vPool.balance1,\r\n            vPool.balance0\r\n        );\r\n\r\n        if (data.length > 0)\r\n            IvFlashSwapCallback(msg.sender).vFlashSwapCallback(\r\n                vPool.token0,\r\n                vPool.token1,\r\n                requiredAmountIn,\r\n                data\r\n            );\r\n\r\n        _amountIn =\r\n            fetchBalance(vPool.token0) -\r\n            (vPool.token0 == token0 ? pairBalance0 : pairBalance1);\r\n\r\n        require(_amountIn > 0 && _amountIn >= requiredAmountIn, \"IIA\");\r\n\r\n        // //update reserve balance in the equivalent of token0 value\r\n\r\n        uint256 _reserveBaseValue = reserves[vPool.token1] - amountOut;\r\n        if (_reserveBaseValue > 0) {\r\n            // //re-calculate price of reserve asset in token0 for the whole pool blance\r\n            _reserveBaseValue = vSwapLibrary.quote(\r\n                _reserveBaseValue,\r\n                vPool.balance1,\r\n                vPool.balance0\r\n            );\r\n        }\r\n\r\n        if (_reserveBaseValue > 0 && vPool.token1 == token1) {\r\n            //if tokenOut is not token0 we should quote it to token0 value\r\n            _reserveBaseValue = vSwapLibrary.quote(\r\n                _reserveBaseValue,\r\n                pairBalance1,\r\n                pairBalance0\r\n            );\r\n        }\r\n\r\n        reservesBaseValue[vPool.token1] = _reserveBaseValue;\r\n\r\n        //update reserve balance\r\n        reserves[vPool.token1] -= amountOut;\r\n\r\n        _update(fetchBalance(token0), fetchBalance(token1));\r\n\r\n        emit SwapReserve(\r\n            msg.sender,\r\n            vPool.token0,\r\n            vPool.token1,\r\n            requiredAmountIn,\r\n            amountOut,\r\n            ikPair,\r\n            to\r\n        );\r\n    }\r\n\r\n    function swapReserveToNative(\r\n        uint256 amountOut,\r\n        address ikPair,\r\n        address to,\r\n        bytes calldata data\r\n    ) external override lock returns (uint256 amountIn) {\r\n        require(amountOut > 0, \"IAO\");\r\n        require(to > address(0) && to != token0 && to != token1, \"IT\");\r\n\r\n        VirtualPoolModel memory vPool = vSwapLibrary.getVirtualPoolBase(\r\n            token0,\r\n            token1,\r\n            pairBalance0,\r\n            pairBalance1,\r\n            vFee,\r\n            ikPair\r\n        );\r\n\r\n        // validate ikPair with factory\r\n        require(\r\n            IvPairFactory(factory).getPair(vPool.token0, vPool.commonToken) ==\r\n                ikPair,\r\n            \"IIKP\"\r\n        );\r\n\r\n        require(amountOut <= vPool.balance1, \"AOE\");\r\n        require(allowListMap[vPool.token0], \"TNW\");\r\n        require(vPool.token1 == token0 || vPool.token1 == token1, \"NNT\");\r\n\r\n        SafeERC20.safeTransfer(IERC20(vPool.token1), to, amountOut);\r\n\r\n        uint256 requiredAmountIn = vSwapLibrary.getAmountIn(\r\n            amountOut,\r\n            vPool.balance0,\r\n            vPool.balance1,\r\n            vFee\r\n        );\r\n\r\n        if (data.length > 0)\r\n            IvFlashSwapCallback(msg.sender).vFlashSwapCallback(\r\n                vPool.token0,\r\n                vPool.token1,\r\n                requiredAmountIn,\r\n                data\r\n            );\r\n\r\n        amountIn = fetchBalance(vPool.token0) - reserves[vPool.token0];\r\n\r\n        require(amountIn > 0 && amountIn >= requiredAmountIn, \"IIA\");\r\n\r\n        //update reserve balance in the equivalent of token0 value\r\n        uint256 _reserveBaseValue = reserves[vPool.token0] + amountIn;\r\n\r\n        //re-calculate price of reserve asset in token0 for the whole pool blance\r\n        _reserveBaseValue = vSwapLibrary.quote(\r\n            _reserveBaseValue,\r\n            vPool.balance0,\r\n            vPool.balance1\r\n        );\r\n\r\n        if (vPool.token1 == token1) {\r\n            //if tokenOut is not token0 we should quote it to token0 value\r\n            _reserveBaseValue = vSwapLibrary.quote(\r\n                _reserveBaseValue,\r\n                pairBalance1,\r\n                pairBalance0\r\n            );\r\n        }\r\n\r\n        reservesBaseValue[vPool.token0] = _reserveBaseValue;\r\n\r\n        //update reserve balance\r\n        reserves[vPool.token0] += amountIn;\r\n\r\n        require(calculateReserveRatio() < maxReserveRatio, \"TBPT\"); // reserve amount goes beyond pool threshold\r\n\r\n        _update(fetchBalance(token0), fetchBalance(token1));\r\n\r\n        emit SwapReserve(\r\n            msg.sender,\r\n            vPool.token0,\r\n            vPool.token1,\r\n            requiredAmountIn,\r\n            amountOut,\r\n            ikPair,\r\n            to\r\n        );\r\n    }\r\n\r\n    function calculateReserveRatio()\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 rRatio)\r\n    {\r\n        uint256 _balance0 = pairBalance0;\r\n        for (uint256 i = 0; i < allowList.length; ++i) {\r\n            uint256 _rReserve = reservesBaseValue[allowList[i]];\r\n            if (_rReserve > 0) {\r\n                rRatio += (vSwapLibrary.percent(_rReserve, _balance0 * 2) *\r\n                    100);\r\n            }\r\n        }\r\n\r\n        rRatio *= RESERVE_RATIO_FACTOR;\r\n    }\r\n\r\n    function mint(address to)\r\n        external\r\n        override\r\n        lock\r\n        returns (uint256 liquidity)\r\n    {\r\n        (uint256 _pairBalance0, uint256 _pairBalance1) = (\r\n            pairBalance0,\r\n            pairBalance1\r\n        );\r\n        uint256 currentBalance0 = fetchBalance(token0);\r\n        uint256 currentBalance1 = fetchBalance(token1);\r\n        uint256 amount0 = currentBalance0 - _pairBalance0;\r\n        uint256 amount1 = currentBalance1 - _pairBalance1;\r\n\r\n        uint256 _totalSupply = totalSupply();\r\n        if (_totalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\r\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * _totalSupply) / _pairBalance0,\r\n                (amount1 * _totalSupply) / _pairBalance1\r\n            );\r\n        }\r\n\r\n        //substract reserve ratio PCT from minted liquidity tokens amount\r\n        uint256 reserveRatio = calculateReserveRatio();\r\n\r\n        liquidity =\r\n            liquidity -\r\n            ((liquidity * reserveRatio) / (RESERVE_RATIO_WHOLE + reserveRatio));\r\n\r\n        require(liquidity > 0, \"ILM\");\r\n\r\n        _mint(to, liquidity);\r\n\r\n        _update(currentBalance0, currentBalance1);\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    function burn(address to)\r\n        external\r\n        override\r\n        lock\r\n        returns (uint256 amount0, uint256 amount1)\r\n    {\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        uint256 balance0 = fetchBalance(_token0);\r\n        uint256 balance1 = fetchBalance(_token1);\r\n        uint256 liquidity = fetchBalance(address(this));\r\n\r\n        uint256 _totalSupply = totalSupply();\r\n        amount0 = (balance0 * liquidity) / _totalSupply;\r\n        amount1 = (balance1 * liquidity) / _totalSupply;\r\n\r\n        require(amount0 > 0 && amount1 > 0, \"ILB\");\r\n\r\n        _burn(address(this), liquidity);\r\n        SafeERC20.safeTransfer(IERC20(_token0), to, amount0);\r\n        SafeERC20.safeTransfer(IERC20(_token1), to, amount1);\r\n\r\n        //distribute reserve tokens and update reserve ratios\r\n        uint256 _currentReserveRatio = calculateReserveRatio();\r\n        if (_currentReserveRatio > 0) {\r\n            for (uint256 i = 0; i < allowList.length; ++i) {\r\n                address _wlI = allowList[i];\r\n                uint256 reserveBalance = reserves[_wlI];\r\n\r\n                if (reserveBalance > 0) {\r\n                    uint256 reserveAmountOut = (reserveBalance * liquidity) /\r\n                        _totalSupply;\r\n\r\n                    SafeERC20.safeTransfer(IERC20(_wlI), to, reserveAmountOut);\r\n\r\n                    uint256 reserveBaseValuewlI = reservesBaseValue[_wlI]; //gas saving\r\n\r\n                    reservesBaseValue[_wlI] =\r\n                        reserveBaseValuewlI -\r\n                        ((reserveBaseValuewlI * liquidity) / _totalSupply);\r\n\r\n                    reserves[_wlI] = reserveBalance - reserveAmountOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        balance0 = fetchBalance(_token0);\r\n        balance1 = fetchBalance(_token1);\r\n\r\n        _update(balance0, balance1);\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    function setAllowList(address[] memory _allowList)\r\n        external\r\n        override\r\n        onlyFactoryAdmin\r\n    {\r\n        require(allowList.length < maxAllowListCount, \"MW\");\r\n\r\n        address[] memory _oldWL = allowList;\r\n\r\n        for (uint256 i = 0; i < _oldWL.length; ++i)\r\n            allowListMap[_oldWL[i]] = false;\r\n\r\n        //set new allowList\r\n        allowList = _allowList;\r\n        for (uint256 i = 0; i < _allowList.length; ++i)\r\n            allowListMap[_allowList[i]] = true;\r\n\r\n        emit AllowListChanged(_allowList);\r\n    }\r\n\r\n    function setFactory(address _factory) external onlyFactoryAdmin {\r\n        require(_factory > address(0) && _factory != factory, \"IFA\");\r\n        factory = _factory;\r\n\r\n        emit FactoryChanged(_factory);\r\n    }\r\n\r\n    function setFee(uint24 _fee, uint24 _vFee)\r\n        external\r\n        override\r\n        onlyFactoryAdmin\r\n    {\r\n        require(_fee > 0 && _vFee > 0 && _fee < 1000 && _vFee < 1000, \"IFC\");\r\n        fee = _fee;\r\n        vFee = _vFee;\r\n\r\n        emit FeeChanged(_fee, _vFee);\r\n    }\r\n\r\n    function setMaxReserveThreshold(uint256 threshold)\r\n        external\r\n        override\r\n        onlyFactoryAdmin\r\n    {\r\n        require(threshold > 0, \"IRT\");\r\n        maxReserveRatio = threshold;\r\n\r\n        emit ReserveThresholdChanged(threshold);\r\n    }\r\n\r\n    function setMaxAllowListCount(uint24 _maxAllowListCount)\r\n        external\r\n        override\r\n        onlyFactoryAdmin\r\n    {\r\n        maxAllowListCount = _maxAllowListCount;\r\n        emit AllowListCountChanged(_maxAllowListCount);\r\n    }\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/vRouter.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\r\n\r\nimport \"./types.sol\";\r\nimport \"./vPair.sol\";\r\nimport \"./base/multicall.sol\";\r\nimport \"./libraries/PoolAddress.sol\";\r\nimport \"./libraries/vSwapLibrary.sol\";\r\nimport \"./interfaces/IvRouter.sol\";\r\nimport \"./interfaces/IvPairFactory.sol\";\r\nimport \"./interfaces/IvPair.sol\";\r\nimport \"./interfaces/external/IWETH9.sol\";\r\n\r\ncontract vRouter is IvRouter, Multicall {\r\n    address public override factory;\r\n    address public immutable override WETH9;\r\n\r\n    modifier _onlyFactoryAdmin() {\r\n        require(\r\n            msg.sender == IvPairFactory(factory).admin(),\r\n            \"VSWAP:ONLY_ADMIN\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notAfter(uint256 deadline) {\r\n        require(deadline >= block.timestamp, \"VSWAP:EXPIRED\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _factory, address _WETH9) {\r\n        WETH9 = _WETH9;\r\n        factory = _factory;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender == WETH9, \"Not WETH9\");\r\n    }\r\n\r\n    function getPairAddress(address tokenA, address tokenB)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return PoolAddress.computeAddress(factory, tokenA, tokenB);\r\n    }\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        internal\r\n        view\r\n        returns (IvPair)\r\n    {\r\n        return IvPair(getPairAddress(tokenA, tokenB));\r\n    }\r\n\r\n    function vFlashSwapCallback(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 requiredBackAmount,\r\n        bytes calldata data\r\n    ) external override {\r\n        SwapCallbackData memory decodedData = abi.decode(\r\n            data,\r\n            (SwapCallbackData)\r\n        );\r\n\r\n        if (decodedData.jkPool > address(0)) {\r\n            //validate JK pool\r\n            (address jkToken0, address jkToken1) = IvPair(decodedData.jkPool)\r\n                .getTokens();\r\n\r\n            require(\r\n                msg.sender ==\r\n                    PoolAddress.computeAddress(factory, jkToken0, jkToken1),\r\n                \"VSWAP:INVALID_CALLBACK_VPOOL\"\r\n            );\r\n        } else\r\n            require(\r\n                msg.sender ==\r\n                    PoolAddress.computeAddress(factory, tokenIn, tokenOut),\r\n                \"VSWAP:INVALID_CALLBACK_POOL\"\r\n            );\r\n\r\n        //validate amount to pay back dont exceeds\r\n        require(\r\n            requiredBackAmount <= decodedData.tokenInMax,\r\n            \"VSWAP:REQUIRED_AMOUNT_EXCEEDS\"\r\n        );\r\n        // handle payment\r\n        if (tokenIn == WETH9 && decodedData.ETHValue > 0) {\r\n            require(\r\n                decodedData.ETHValue >= requiredBackAmount,\r\n                \"VSWAP:INSUFFICIENT_ETH_INPUT_AMOUNT\"\r\n            );\r\n            // pay back with WETH9\r\n            IWETH9(WETH9).deposit{value: requiredBackAmount}();\r\n            IWETH9(WETH9).transfer(msg.sender, requiredBackAmount);\r\n\r\n            //send any ETH leftovers to caller\r\n            payable(decodedData.caller).transfer(address(this).balance);\r\n        } else {\r\n            SafeERC20.safeTransferFrom(\r\n                IERC20(tokenIn),\r\n                decodedData.caller,\r\n                msg.sender,\r\n                requiredBackAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function unwrapTransferETH(address to, uint256 amount) internal {\r\n        IWETH9(WETH9).withdraw(amount);\r\n        payable(to).transfer(amount);\r\n    }\r\n\r\n    function swapExactOutput(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        uint256 maxAmountIn,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable override notAfter(deadline) {\r\n        getPair(tokenIn, tokenOut).swapNative(\r\n            amountOut,\r\n            tokenOut,\r\n            tokenOut == WETH9 ? address(this) : to,\r\n            abi.encode(\r\n                SwapCallbackData({\r\n                    caller: msg.sender,\r\n                    tokenInMax: maxAmountIn,\r\n                    ETHValue: address(this).balance,\r\n                    jkPool: address(0)\r\n                })\r\n            )\r\n        );\r\n\r\n        if (tokenOut == WETH9) {\r\n            unwrapTransferETH(to, amountOut);\r\n        }\r\n    }\r\n\r\n    function swapExactInput(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 minAmountOut,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable override notAfter(deadline) {\r\n        uint256 amountOut = getAmountOut(tokenIn, tokenOut, amountIn);\r\n        require(amountOut >= minAmountOut, \"VSWAP: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n\r\n        getPair(tokenIn, tokenOut).swapNative(\r\n            amountOut,\r\n            tokenOut,\r\n            tokenOut == WETH9 ? address(this) : to,\r\n            abi.encode(\r\n                SwapCallbackData({\r\n                    caller: msg.sender,\r\n                    tokenInMax: amountIn,\r\n                    ETHValue: address(this).balance,\r\n                    jkPool: address(0)\r\n                })\r\n            )\r\n        );\r\n\r\n        if (tokenOut == WETH9) {\r\n            unwrapTransferETH(to, amountOut);\r\n        }\r\n    }\r\n\r\n    function swapReserveExactOutput(\r\n        address tokenOut,\r\n        address commonToken,\r\n        address ikPair,\r\n        uint256 amountOut,\r\n        uint256 maxAmountIn,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable override notAfter(deadline) {\r\n        address jkAddress = getPairAddress(tokenOut, commonToken);\r\n\r\n        IvPair(jkAddress).swapReserveToNative(\r\n            amountOut,\r\n            ikPair,\r\n            tokenOut == WETH9 ? address(this) : to,\r\n            abi.encode(\r\n                SwapCallbackData({\r\n                    caller: msg.sender,\r\n                    tokenInMax: maxAmountIn,\r\n                    ETHValue: address(this).balance,\r\n                    jkPool: jkAddress\r\n                })\r\n            )\r\n        );\r\n\r\n        if (tokenOut == WETH9) {\r\n            unwrapTransferETH(to, amountOut);\r\n        }\r\n    }\r\n\r\n    function swapReserveExactInput(\r\n        address tokenOut,\r\n        address commonToken,\r\n        address ikPair,\r\n        uint256 amountIn,\r\n        uint256 minAmountOut,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable override notAfter(deadline) {\r\n        address jkAddress = getPairAddress(tokenOut, commonToken);\r\n        uint256 amountOut = getVirtualAmountOut(jkAddress, ikPair, amountIn);\r\n\r\n        require(\r\n            amountOut >= minAmountOut,\r\n            \"VSWAP: INSUFFICIENT_VOUTPUT_AMOUNT\"\r\n        );\r\n\r\n        IvPair(jkAddress).swapReserveToNative(\r\n            amountOut,\r\n            ikPair,\r\n            tokenOut == WETH9 ? address(this) : to,\r\n            abi.encode(\r\n                SwapCallbackData({\r\n                    caller: msg.sender,\r\n                    tokenInMax: amountIn,\r\n                    ETHValue: address(this).balance,\r\n                    jkPool: jkAddress\r\n                })\r\n            )\r\n        );\r\n\r\n        if (tokenOut == WETH9) {\r\n            unwrapTransferETH(to, amountOut);\r\n        }\r\n    }\r\n\r\n    function _addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin\r\n    )\r\n        internal\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            address pairAddress\r\n        )\r\n    {\r\n        pairAddress = IvPairFactory(factory).getPair(tokenA, tokenB);\r\n        // create the pair if it doesn't exist yet\r\n        if (pairAddress == address(0))\r\n            pairAddress = IvPairFactory(factory).createPair(tokenA, tokenB);\r\n\r\n        (uint256 reserve0, uint256 reserve1) = IvPair(pairAddress)\r\n            .getBalances();\r\n\r\n        if (reserve0 == 0 && reserve1 == 0) {\r\n            (amountA, amountB) = (amountADesired, amountBDesired);\r\n        } else {\r\n            uint256 amountBOptimal = vSwapLibrary.quote(\r\n                amountADesired,\r\n                reserve0,\r\n                reserve1\r\n            );\r\n\r\n            if (amountBOptimal <= amountBDesired) {\r\n                require(\r\n                    amountBOptimal >= amountBMin,\r\n                    \"VSWAP: INSUFFICIENT_B_AMOUNT\"\r\n                );\r\n                (amountA, amountB) = (amountADesired, amountBOptimal);\r\n            } else {\r\n                uint256 amountAOptimal = vSwapLibrary.quote(\r\n                    amountBDesired,\r\n                    reserve1,\r\n                    reserve0\r\n                );\r\n\r\n                assert(amountAOptimal <= amountADesired);\r\n                require(\r\n                    amountAOptimal >= amountAMin,\r\n                    \"VSWAP: INSUFFICIENT_A_AMOUNT\"\r\n                );\r\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        override\r\n        notAfter(deadline)\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            address pairAddress,\r\n            uint256 liquidity\r\n        )\r\n    {\r\n        (amountA, amountB, pairAddress) = _addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            amountADesired,\r\n            amountBDesired,\r\n            amountAMin,\r\n            amountBMin\r\n        );\r\n\r\n        SafeERC20.safeTransferFrom(\r\n            IERC20(tokenA),\r\n            msg.sender,\r\n            pairAddress,\r\n            amountA\r\n        );\r\n        SafeERC20.safeTransferFrom(\r\n            IERC20(tokenB),\r\n            msg.sender,\r\n            pairAddress,\r\n            amountB\r\n        );\r\n\r\n        liquidity = IvPair(pairAddress).mint(to);\r\n    }\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        override\r\n        notAfter(deadline)\r\n        returns (uint256 amountA, uint256 amountB)\r\n    {\r\n        address pairAddress = getPairAddress(tokenA, tokenB);\r\n\r\n        SafeERC20.safeTransferFrom(\r\n            IERC20(pairAddress),\r\n            msg.sender,\r\n            pairAddress,\r\n            liquidity\r\n        );\r\n\r\n        (amountA, amountB) = IvPair(pairAddress).burn(to);\r\n\r\n        require(amountA >= amountAMin, \"VSWAP: INSUFFICIENT_A_AMOUNT\");\r\n        require(amountB >= amountBMin, \"VSWAP: INSUFFICIENT_B_AMOUNT\");\r\n    }\r\n\r\n    function getVirtualAmountIn(\r\n        address jkPair,\r\n        address ikPair,\r\n        uint256 amountOut\r\n    ) external view override returns (uint256 amountIn) {\r\n        VirtualPoolModel memory vPool = getVirtualPool(jkPair, ikPair);\r\n\r\n        amountIn = vSwapLibrary.getAmountIn(\r\n            amountOut,\r\n            vPool.balance0,\r\n            vPool.balance1,\r\n            vPool.fee\r\n        );\r\n    }\r\n\r\n    function getVirtualAmountOut(\r\n        address jkPair,\r\n        address ikPair,\r\n        uint256 amountIn\r\n    ) public view override returns (uint256 amountOut) {\r\n        VirtualPoolModel memory vPool = getVirtualPool(jkPair, ikPair);\r\n\r\n        amountOut = vSwapLibrary.getAmountOut(\r\n            amountIn,\r\n            vPool.balance0,\r\n            vPool.balance1,\r\n            vPool.fee\r\n        );\r\n    }\r\n\r\n    function getVirtualPool(address jkPair, address ikPair)\r\n        public\r\n        view\r\n        override\r\n        returns (VirtualPoolModel memory vPool)\r\n    {\r\n        vPool = vSwapLibrary.getVirtualPool(jkPair, ikPair);\r\n    }\r\n\r\n    function quote(\r\n        address inputToken,\r\n        address outputToken,\r\n        uint256 amountIn\r\n    ) external view override returns (uint256 amountOut) {\r\n        IvPair pair = getPair(inputToken, outputToken);\r\n\r\n        (uint256 balance0, uint256 balance1) = pair.getBalances();\r\n\r\n        (balance0, balance1) = vSwapLibrary.sortBalances(\r\n            inputToken,\r\n            pair.token0(),\r\n            balance0,\r\n            balance1\r\n        );\r\n\r\n        amountOut = vSwapLibrary.quote(amountIn, balance0, balance1);\r\n    }\r\n\r\n    function getAmountOut(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn\r\n    ) public view virtual override returns (uint256 amountOut) {\r\n        IvPair pair = getPair(tokenIn, tokenOut);\r\n\r\n        (uint256 balance0, uint256 balance1) = pair.getBalances();\r\n\r\n        (balance0, balance1) = vSwapLibrary.sortBalances(\r\n            tokenIn,\r\n            pair.token0(),\r\n            balance0,\r\n            balance1\r\n        );\r\n\r\n        amountOut = vSwapLibrary.getAmountOut(\r\n            amountIn,\r\n            balance0,\r\n            balance1,\r\n            pair.fee()\r\n        );\r\n    }\r\n\r\n    function getAmountIn(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut\r\n    ) external view virtual override returns (uint256 amountIn) {\r\n        IvPair pair = getPair(tokenIn, tokenOut);\r\n        (uint256 balance0, uint256 balance1) = IvPair(pair).getBalances();\r\n\r\n        (balance0, balance1) = vSwapLibrary.sortBalances(\r\n            tokenIn,\r\n            pair.token0(),\r\n            balance0,\r\n            balance1\r\n        );\r\n\r\n        amountIn = vSwapLibrary.getAmountIn(\r\n            amountOut,\r\n            balance0,\r\n            balance1,\r\n            pair.fee()\r\n        );\r\n    }\r\n\r\n    function changeFactory(address _factory)\r\n        external\r\n        override\r\n        _onlyFactoryAdmin\r\n    {\r\n        require(\r\n            _factory > address(0) && _factory != factory,\r\n            \"VSWAP:INVALID_FACTORY\"\r\n        );\r\n        factory = _factory;\r\n\r\n        emit RouterFactoryChanged(_factory);\r\n    }\r\n}\r\n"},"/C/virtuswap/v1-core/contracts/vSwapERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity 0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract vSwapERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private constant _name = \"Virtuswap-LP\";\r\n    string private constant _symbol = \"VSWAPLP\";\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"},"@uniswap/lib/contracts/libraries/TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"},"@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"}},"settings":{"remappings":[],"optimizer":{"enabled":true,"runs":800},"evmVersion":"istanbul"}}